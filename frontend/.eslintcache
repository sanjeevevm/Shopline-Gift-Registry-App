[{"C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\index.js":"1","C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\store.js":"2","C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\App.js":"3","C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\reducers\\cartReducers.js":"4","C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\reducers\\productReducers.js":"5","C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\components\\Header.js":"6","C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\components\\Footer.js":"7","C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\screens\\CartScreen.js":"8","C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\screens\\ProductScreen.js":"9","C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\screens\\HomeScreen.js":"10","C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\components\\Product.js":"11","C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\components\\Loader.js":"12","C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\components\\Message.js":"13","C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\components\\Rating.js":"14","C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\constants\\cartConst.js":"15","C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\constants\\productConst.js":"16","C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\actions\\cartActions.js":"17","C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\actions\\productActions.js":"18","C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\reducers\\userReducers.js":"19","C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\constants\\userConst.js":"20","C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\screens\\LoginScreen.js":"21","C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\components\\FormContainer.js":"22","C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\actions\\userActions.js":"23","C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\screens\\RegisterScreen.js":"24","C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\screens\\ProfileScreen.js":"25","C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\screens\\ShippingScreen.js":"26","C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\components\\CheckoutSteps.js":"27","C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\screens\\PaymentScreen.js":"28","C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\screens\\PlaceOrderScreen.js":"29","C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\reducers\\orderReducers.js":"30","C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\actions\\orderActions.js":"31","C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\constants\\orderConst.js":"32","C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\screens\\OrderScreen.js":"33","C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\screens\\UserListScreen.js":"34","C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\screens\\UserEditScreen.js":"35","C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\screens\\ProductListScreen.js":"36","C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\screens\\ProductEditScreen.js":"37","C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\screens\\OrderListScreen.js":"38","C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\components\\Search.js":"39","C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\components\\Paginate.js":"40","C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\components\\ProductCarousel.js":"41","C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\components\\Meta.js":"42"},{"size":312,"mtime":1612965952688,"results":"43","hashOfConfig":"44"},{"size":2225,"mtime":1614021627306,"results":"45","hashOfConfig":"44"},{"size":2503,"mtime":1614020881628,"results":"46","hashOfConfig":"44"},{"size":1405,"mtime":1614118556859,"results":"47","hashOfConfig":"44"},{"size":3793,"mtime":1614021600893,"results":"48","hashOfConfig":"44"},{"size":2581,"mtime":1614121161171,"results":"49","hashOfConfig":"44"},{"size":328,"mtime":1612465262202,"results":"50","hashOfConfig":"44"},{"size":3106,"mtime":1614108512717,"results":"51","hashOfConfig":"44"},{"size":6482,"mtime":1614100667598,"results":"52","hashOfConfig":"44"},{"size":1584,"mtime":1614091959953,"results":"53","hashOfConfig":"44"},{"size":776,"mtime":1614091586481,"results":"54","hashOfConfig":"44"},{"size":411,"mtime":1612910496251,"results":"55","hashOfConfig":"44"},{"size":255,"mtime":1612910590907,"results":"56","hashOfConfig":"44"},{"size":1730,"mtime":1612484815073,"results":"57","hashOfConfig":"44"},{"size":354,"mtime":1614108254760,"results":"58","hashOfConfig":"44"},{"size":1480,"mtime":1614021547522,"results":"59","hashOfConfig":"44"},{"size":1270,"mtime":1613250315054,"results":"60","hashOfConfig":"44"},{"size":5440,"mtime":1614021687288,"results":"61","hashOfConfig":"44"},{"size":3497,"mtime":1613925976100,"results":"62","hashOfConfig":"44"},{"size":1420,"mtime":1613925897929,"results":"63","hashOfConfig":"44"},{"size":2128,"mtime":1613076839849,"results":"64","hashOfConfig":"44"},{"size":352,"mtime":1613076529910,"results":"65","hashOfConfig":"44"},{"size":6104,"mtime":1613925934304,"results":"66","hashOfConfig":"44"},{"size":3125,"mtime":1613145736413,"results":"67","hashOfConfig":"44"},{"size":5409,"mtime":1614184501329,"results":"68","hashOfConfig":"44"},{"size":2571,"mtime":1614187293287,"results":"69","hashOfConfig":"44"},{"size":1028,"mtime":1613227051064,"results":"70","hashOfConfig":"44"},{"size":1435,"mtime":1613250609703,"results":"71","hashOfConfig":"44"},{"size":5282,"mtime":1614187153418,"results":"72","hashOfConfig":"44"},{"size":3727,"mtime":1614185129764,"results":"73","hashOfConfig":"44"},{"size":5242,"mtime":1614185315738,"results":"74","hashOfConfig":"44"},{"size":1221,"mtime":1613995027968,"results":"75","hashOfConfig":"44"},{"size":7338,"mtime":1614186873513,"results":"76","hashOfConfig":"44"},{"size":2741,"mtime":1613741355879,"results":"77","hashOfConfig":"44"},{"size":3001,"mtime":1613743324175,"results":"78","hashOfConfig":"44"},{"size":3981,"mtime":1614084738805,"results":"79","hashOfConfig":"44"},{"size":5673,"mtime":1614188452864,"results":"80","hashOfConfig":"44"},{"size":2678,"mtime":1614178357033,"results":"81","hashOfConfig":"44"},{"size":744,"mtime":1614011661675,"results":"82","hashOfConfig":"44"},{"size":623,"mtime":1614020891532,"results":"83","hashOfConfig":"44"},{"size":1279,"mtime":1614024922948,"results":"84","hashOfConfig":"44"},{"size":265,"mtime":1614024003761,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"cv0th2",{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"88"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"88"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"88"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"88"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"88"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\index.js",[],["176","177"],"C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\store.js",[],"C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\App.js",[],"C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\reducers\\cartReducers.js",[],"C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\reducers\\productReducers.js",[],"C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\components\\Header.js",[],"C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\components\\Footer.js",[],"C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\screens\\CartScreen.js",["178"],"import React, { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Message from '../components/Message';\r\nimport {\r\n  Button,\r\n  Card,\r\n  Col,\r\n  Form,\r\n  FormControl,\r\n  Image,\r\n  ListGroup,\r\n  ListGroupItem,\r\n  Row,\r\n} from 'react-bootstrap';\r\nimport { addToCart,removeFromCart } from '../actions/cartActions';\r\nimport{CART_RESET_SHIPPING_ADDRESS} from '../constants/cartConst'\r\n\r\nconst CartScreen = ({ match, location, history }) => {\r\n  const productId = match.params.id;\r\n  const qty = location.search ? Number(location.search.split('=')[1]) : 1;\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const cart = useSelector((state) => state.cart);\r\n  const { cartItems } = cart;\r\n\r\n  useEffect(() => {\r\n    if (productId) {\r\n        dispatch(addToCart(productId, qty));\r\n    }\r\n}, [dispatch, productId, qty]);\r\n\r\nconst removeCartHandler=(id)=>{\r\n    dispatch(removeFromCart(id))\r\n}\r\n\r\nconst checkoutHandler=()=>{\r\n      dispatch({type:CART_RESET_SHIPPING_ADDRESS})\r\n      history.push('/login?redirect=shipping')\r\n  }\r\n  return (\r\n    <Row>\r\n      <Col md={8}>\r\n    <h1>Shopping cart</h1>\r\n    {cartItems.length===0?<Message>Cart is empty <Link to='/'>Go back</Link></Message>:(\r\n    <ListGroup variant='flush'>\r\n    {cartItems.map(item=>(\r\n    <ListGroupItem key={item.product}>\r\n        <Row>\r\n            <Col md={2}>\r\n                <Image src={item.image} alt={item.name} fluid rounded/>\r\n            </Col>\r\n            <Col md={3}>\r\n                <Link to={`/product/${item.product}`}>{item.name}</Link>\r\n            </Col>\r\n            <Col md={2}>\r\n                ${item.price}\r\n            </Col>\r\n            <Col md={2}>\r\n            <FormControl as='select' value={item.qty} onChange={(e)=>dispatch(addToCart(item.product,Number(e.target.value)))}>\r\n                             {\r\n                             [...Array(item.countInStock).keys()].map(x=>(\r\n                                 <option key={x+1} value={x+1}>\r\n                                     {x+1}\r\n                                 </option>\r\n                             ))\r\n}\r\n                         </FormControl>\r\n            </Col>\r\n            <Col md={2}>\r\n                <Button type='button' variant='light' onClick={()=>removeCartHandler(item.product)}>\r\n                    <i className='fas fa-trash'></i>\r\n                </Button>\r\n            </Col>\r\n        </Row>\r\n\r\n    </ListGroupItem>\r\n))}\r\n    </ListGroup>\r\n)}\r\n      </Col>\r\n      <Col md={4}>\r\n<Card>\r\n    <ListGroup variant='flush'>\r\n        <ListGroupItem>\r\n            <h2>Subtotal ({cartItems.reduce((acc,cur)=>acc+cur.qty,0)})items</h2>\r\n            ${cartItems.reduce((acc,cur)=>acc+cur.qty*cur.price,0).toFixed(2)}\r\n        </ListGroupItem>\r\n        <ListGroupItem>\r\n            <Button type='button' className='btn-block' disabled={cartItems.length===0}onClick={checkoutHandler}>\r\n                Proceed to checkout\r\n            </Button>\r\n        </ListGroupItem>\r\n    </ListGroup>\r\n</Card>\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default CartScreen;\r\n","C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\screens\\ProductScreen.js",[],"C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\screens\\HomeScreen.js",[],"C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\components\\Product.js",[],"C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\components\\Loader.js",[],"C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\components\\Message.js",[],"C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\components\\Rating.js",[],"C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\constants\\cartConst.js",[],"C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\constants\\productConst.js",[],"C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\actions\\cartActions.js",[],"C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\actions\\productActions.js",[],"C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\reducers\\userReducers.js",[],"C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\constants\\userConst.js",[],"C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\screens\\LoginScreen.js",[],"C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\components\\FormContainer.js",[],"C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\actions\\userActions.js",[],"C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\screens\\RegisterScreen.js",[],"C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\screens\\ProfileScreen.js",["179"],"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Form,\r\n  Button,\r\n  Row,\r\n  Col,\r\n  FormGroup,\r\n  FormLabel,\r\n  FormControl,\r\n  Table,\r\n} from 'react-bootstrap';\r\nimport { LinkContainer } from 'react-router-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Message from '../components/Message';\r\nimport Loader from '../components/Loader';\r\nimport { getDetails, updateUser } from '../actions/userActions';\r\nimport { listMyOrders } from '../actions/orderActions';\r\n\r\n\r\nconst ProfileScreen = ({ history }) => {\r\n  const [email, setEmail] = useState('');\r\n  const [name, setName] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [confirmPassword, setConfirmPassword] = useState('');\r\n  const [message, setMessage] = useState(null);\r\n\r\n  const dispatch = useDispatch();\r\n  const userDetails = useSelector((state) => state.userDetails);\r\n  const { loading, error, user } = userDetails;\r\n\r\n  const userLogin = useSelector((state) => state.userLogin);\r\n  const { userInfo } = userLogin;\r\n\r\n  const userUpdate = useSelector((state) => state.userUpdate);\r\n  const { success } = userUpdate;\r\n\r\n  const orderListMy = useSelector((state) => state.orderListMy);\r\n  const { loading: loadingOrders, error: errorOrders, orders } = orderListMy;\r\n\r\n  useEffect(() => {\r\n\r\n    if (!userInfo) {\r\n      history.push('/login');\r\n    } else {\r\n      if (!user.name) {\r\n        dispatch(getDetails('profile'));\r\n        dispatch(listMyOrders());\r\n      } else {\r\n        setName(user.name);\r\n        setEmail(user.email);\r\n      }\r\n    }\r\n  }, [history, userInfo, user]);\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    if (password !== confirmPassword) setMessage('Passwords do not match');\r\n    else {\r\n      dispatch(updateUser({ id: user._id, name, email, password }));\r\n    }\r\n  };\r\n  return (\r\n    <Row>\r\n      <Col md={3}>\r\n        <h2>My profile</h2>\r\n        {message && <Message variant='danger'>{message}</Message>}\r\n        {error && <Message variant='danger'>{error}</Message>}\r\n        {success && <Message variant='success'>Profile updated</Message>}\r\n        {loading && <Loader />}\r\n        <Form onSubmit={submitHandler}>\r\n          <FormGroup controlId='name'>\r\n            <FormLabel>Name</FormLabel>\r\n            <FormControl\r\n              type='name'\r\n              placeholder='Enter name'\r\n              value={name}\r\n              onChange={(e) => setName(e.target.value)}\r\n            ></FormControl>\r\n          </FormGroup>\r\n          <FormGroup controlId='email'>\r\n            <FormLabel>Email adress</FormLabel>\r\n            <FormControl\r\n              type='email'\r\n              placeholder='Enter email'\r\n              value={email}\r\n              onChange={(e) => setEmail(e.target.value)}\r\n            ></FormControl>\r\n          </FormGroup>\r\n\r\n          <FormGroup controlId='password'>\r\n            <FormLabel>Password</FormLabel>\r\n            <FormControl\r\n              type='password'\r\n              placeholder='Enter password'\r\n              value={password}\r\n              onChange={(e) => setPassword(e.target.value)}\r\n            ></FormControl>\r\n          </FormGroup>\r\n          <FormGroup controlId='confirmPassword'>\r\n            <FormLabel>Confirm password</FormLabel>\r\n            <FormControl\r\n              type='password'\r\n              placeholder='Confirm password'\r\n              value={confirmPassword}\r\n              onChange={(e) => setConfirmPassword(e.target.value)}\r\n            ></FormControl>\r\n          </FormGroup>\r\n\r\n          <Button type='submit' variant='primary'>\r\n            Update\r\n          </Button>\r\n        </Form>\r\n      </Col>\r\n      <Col md={9}>\r\n        <h2>My orders</h2>\r\n        {loadingOrders ? (\r\n          <Loader></Loader>\r\n        ) : errorOrders ? (\r\n          <Message variant='danger'>{errorOrders}</Message>\r\n        ) : (\r\n          <Table striped bordered hover responsive className='table-sm'>\r\n            <thead>\r\n              <tr>\r\n                <th>ID</th>\r\n                <th>DATE</th>\r\n                <th>TOTAL</th>\r\n                <th>PAID</th>\r\n                <th>DELIVERED</th>\r\n                <th></th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {orders.map((order) => (\r\n                <tr key={order._id}>\r\n                  <td>{order._id}</td>\r\n                  <td>{order.createdAt.substring(0, 10)}</td>\r\n                  <td>{order.totalPrice}</td>\r\n                  <td>\r\n                    {order.isPaid ? (\r\n                      order.paidAt.substring(0, 10)\r\n                    ) : (\r\n                      <i className='fas fa-times' style={{ color: 'red' }}></i>\r\n                    )}\r\n                  </td>\r\n                  <td>\r\n                    {order.isDelivered ? (\r\n                      order.deliveredAt.substring(0, 10)\r\n                    ) : (\r\n                      <i className='fas fa-times' style={{ color:'red' }}></i>\r\n                    )}\r\n                  </td>\r\n                  <td>\r\n                    <LinkContainer to={`/order/${order._id}`}>\r\n                      <Button variant='light'>Details</Button>\r\n                    </LinkContainer>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </Table>\r\n        )}\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default ProfileScreen;\r\n","C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\screens\\ShippingScreen.js",[],"C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\components\\CheckoutSteps.js",[],"C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\screens\\PaymentScreen.js",[],"C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\screens\\PlaceOrderScreen.js",["180","181","182","183"],"import React, {useEffect } from 'react';\r\nimport {\r\n  Button,\r\n  Row,\r\n  Col,\r\n  ListGroup,\r\n  Image,\r\n  Card,\r\n  ListGroupItem,\r\n} from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Message from '../components/Message';\r\nimport CheckoutSteps from '../components/CheckoutSteps';\r\nimport { Link } from 'react-router-dom';\r\nimport { createOrder } from '../actions/orderActions';\r\nimport{CART_RESET_CART} from '../constants/cartConst'\r\nimport { ORDER_DETAILS_RESET,ORDER_DELIVER_RESET,ORDER_PAY_RESET } from '../constants/orderConst';\r\n\r\nconst PlaceOrderScreen = ({history}) => {\r\n  const dispatch = useDispatch();\r\n  const addDecimals = (num) => {\r\n    return (Math.round(num * 100) / 100).toFixed(2);\r\n  };\r\n  const cart = useSelector((state) => state.cart);\r\n  cart.itemsPrice = addDecimals(cart.cartItems.reduce((acc, item) => acc + item.price * item.qty, 0));\r\n  cart.shippingPrice = addDecimals(cart.itemsPrice > 150 ? 0 : 50);\r\n  cart.taxPrice = addDecimals(Number((0.17 * cart.itemsPrice).toFixed(2)));\r\n  cart.totalPrice = (\r\n    Number(cart.itemsPrice) +\r\n    Number(cart.shippingPrice) +\r\n    Number(cart.taxPrice)\r\n  ).toFixed(2);\r\n\r\n  const orderCreate=useSelector(state=>state.orderCreate)\r\n  const {order,success,error}=orderCreate\r\n  useEffect(()=>{\r\n      if(success){\r\n        history.push(`/order/${order._id}`)\r\n      }\r\n    },[history,success])\r\n    \r\n    const placeOrderHandler = () => {\r\n      dispatch(createOrder({\r\n        orderItems:cart.cartItems,\r\n        shippingAddress:cart.shippingAddress,\r\n        payment:cart.payment,\r\n        itemsPrice:cart.itemsPrice,\r\n        shippingPrice:cart.shippingPrice,\r\n        taxPrice:cart.taxPrice,\r\n        totalPrice:cart.totalPrice\r\n      }))\r\n      dispatch({type:CART_RESET_CART})\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <CheckoutSteps step1 step2 step3 step4 />\r\n      <Row>\r\n        <Col md={8}>\r\n          <ListGroup variant='flush'>\r\n            <ListGroupItem>\r\n              <h2>Shipping</h2>\r\n              <p>\r\n                <strong>Address: </strong>\r\n                {cart.shippingAddress.address}, {cart.shippingAddress.city}{' '}\r\n                {cart.shippingAddress.postalCode},{' '}\r\n                {cart.shippingAddress.country}\r\n              </p>\r\n            </ListGroupItem>\r\n            <ListGroupItem>\r\n              <h2>Payment method</h2>\r\n              <strong>Method: </strong>\r\n              {cart.payment}\r\n            </ListGroupItem>\r\n\r\n            <ListGroupItem>\r\n              <h2>Order items</h2>\r\n              {cart.cartItems.length === 0 ? (\r\n                <Message>Your cart is empty</Message>\r\n              ) : (\r\n                <ListGroup variant='flush'>\r\n                  {cart.cartItems.map((item, index) => (\r\n                    <ListGroupItem key={index}>\r\n                      <Row>\r\n                        <Col md={1}>\r\n                          <Image\r\n                            src={item.image}\r\n                            alt={item.name}\r\n                            fluid\r\n                            rounded\r\n                          ></Image>\r\n                        </Col>\r\n                        <Col>\r\n                          <Link to={`/product/${item.product}`}>\r\n                            {item.name}\r\n                          </Link>\r\n                        </Col>\r\n                        <Col md={4}>\r\n                          {item.qty} x ${item.price}=${item.qty * item.price}\r\n                        </Col>\r\n                      </Row>\r\n                    </ListGroupItem>\r\n                  ))}\r\n                </ListGroup>\r\n              )}\r\n            </ListGroupItem>\r\n          </ListGroup>\r\n        </Col>\r\n        <Col md={4}>\r\n          <Card>\r\n            <ListGroup variant='flush'>\r\n              <ListGroupItem>\r\n                <h2>Order summary</h2>\r\n              </ListGroupItem>\r\n              <ListGroupItem>\r\n                <Row>\r\n                  <Col>Items</Col>\r\n                  <Col>${cart.itemsPrice}</Col>\r\n                </Row>\r\n              </ListGroupItem>\r\n              <ListGroupItem>\r\n                <Row>\r\n                  <Col>Shipping</Col>\r\n                  <Col>${cart.shippingPrice}</Col>\r\n                </Row>\r\n              </ListGroupItem>\r\n              <ListGroupItem>\r\n                <Row>\r\n                  <Col>Tax</Col>\r\n                  <Col>${cart.taxPrice}</Col>\r\n                </Row>\r\n              </ListGroupItem>\r\n              <ListGroupItem>\r\n                <Row>\r\n                  <Col>Total</Col>\r\n                  <Col>${cart.totalPrice}</Col>\r\n                </Row>\r\n              </ListGroupItem>\r\n              <ListGroupItem>\r\n                  {error && <Message variant='danger'>{error}</Message>}\r\n              </ListGroupItem>\r\n              <ListGroupItem>\r\n                <Button\r\n                  type='button'\r\n                  className='btn-block'\r\n                  disabled={cart.cartItems === 0}\r\n                  onClick={placeOrderHandler}\r\n                >\r\n                  Place order\r\n                </Button>\r\n              </ListGroupItem>\r\n            </ListGroup>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlaceOrderScreen;\r\n","C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\reducers\\orderReducers.js",[],"C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\actions\\orderActions.js",["184"],"import axios from 'axios'\r\nimport {ORDER_CREATE_REQUEST,ORDER_CREATE_FAIL,ORDER_CREATE_SUCCESS, ORDER_DETAILS_REQUEST, ORDER_DETAILS_SUCCESS, ORDER_DETAILS_FAIL, ORDER_PAY_REQUEST, ORDER_PAY_SUCCESS, ORDER_PAY_FAIL, ORDER_LIST_MY_REQUEST, ORDER_LIST_MY_SUCCESS, ORDER_LIST_MY_FAIL, ORDER_LIST_REQUEST, ORDER_LIST_SUCCESS, ORDER_LIST_FAIL, ORDER_DELIVER_REQUEST, ORDER_DELIVER_SUCCESS, ORDER_DELIVER_FAIL, ORDER_DETAILS_RESET} from '../constants/orderConst'\r\n\r\nexport const createOrder = (order) => async (dispatch,getState) => {\r\n\r\n    try {\r\n      dispatch({\r\n        type: ORDER_CREATE_REQUEST,\r\n      });\r\n  \r\n      const {userLogin:{userInfo}}=getState()\r\n  \r\n      const config = {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        Authorization:`Bearer ${userInfo.token}`\r\n        },\r\n      }\r\n  \r\n      const { data } = await axios.post(\r\n        `/api/orders`,order,config\r\n      );\r\n      dispatch({\r\n        type: ORDER_CREATE_SUCCESS,\r\n        payload: data,\r\n      });\r\n  \r\n    } catch (error) {\r\n      dispatch({\r\n          type: ORDER_CREATE_FAIL,\r\n          payload:\r\n            error.response && error.response.data.message\r\n              ? error.response.data.message\r\n              : error.message,\r\n        })\r\n    }\r\n  };\r\n\r\n\r\n  export const getOrderDetails = (id) => async (dispatch,getState) => {\r\n  \r\n    \r\n    try {\r\n      dispatch({\r\n        type: ORDER_DETAILS_REQUEST,\r\n      });\r\n      \r\n      const {userLogin:{userInfo}}=getState()\r\n      \r\n      const config = {\r\n        headers: {\r\n          Authorization:`Bearer ${userInfo.token}`\r\n        },\r\n      }\r\n      \r\n      const { data } = await axios.get(\r\n        `/api/orders/${id}`, config\r\n        );\r\n        \r\n        dispatch({\r\n          type: ORDER_DETAILS_SUCCESS,\r\n          payload: data,\r\n        });\r\n        \r\n      } catch (error) {\r\n        dispatch({\r\n          type: ORDER_DETAILS_FAIL,\r\n          payload:\r\n          error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n        })\r\n      }\r\n    };\r\n\r\n\r\n  export const payOrder = (orderId,paymentResult) => async (dispatch,getState) => {\r\n\r\n    try {\r\n      dispatch({\r\n        type: ORDER_PAY_REQUEST,\r\n      });\r\n  \r\n      const {userLogin:{userInfo}}=getState()\r\n  \r\n      const config = {\r\n        headers: {\r\n          'Content-Type':'application/json',\r\n        Authorization:`Bearer ${userInfo.token}`\r\n        },\r\n      }\r\n  \r\n      const { data } = await axios.put(\r\n        `/api/orders/${orderId}/pay`,paymentResult, config\r\n      );\r\n      dispatch({\r\n        type: ORDER_PAY_SUCCESS,\r\n        payload: data,\r\n      });\r\n  \r\n    } catch (error) {\r\n      dispatch({\r\n          type: ORDER_PAY_FAIL,\r\n          payload:\r\n            error.response && error.response.data.message\r\n              ? error.response.data.message\r\n              : error.message,\r\n        })\r\n    }\r\n  };\r\n\r\n  \r\n  export const listMyOrders = () => async (dispatch,getState) => {\r\n    try {\r\n      dispatch({\r\n        type: ORDER_LIST_MY_REQUEST,\r\n      });\r\n  \r\n      const {userLogin:{userInfo}}=getState()\r\n  \r\n      const config = {\r\n        headers: {\r\n        Authorization:`Bearer ${userInfo.token}`\r\n        },\r\n      }\r\n  \r\n      const { data } = await axios.get(\r\n        `/api/orders/myOrders`, config\r\n      );\r\n      dispatch({\r\n        type: ORDER_LIST_MY_SUCCESS,\r\n        payload: data,\r\n      });\r\n  \r\n    } catch (error) {\r\n      dispatch({\r\n          type: ORDER_LIST_MY_FAIL,\r\n          payload:\r\n            error.response && error.response.data.message\r\n              ? error.response.data.message\r\n              : error.message,\r\n        })\r\n    }\r\n  };\r\n\r\n\r\n  export const listOrders = () => async (dispatch,getState) => {\r\n\r\n\r\n    try {\r\n      dispatch({\r\n        type: ORDER_LIST_REQUEST,\r\n      });\r\n  \r\n      const {userLogin:{userInfo}}=getState()\r\n  \r\n      const config = {\r\n        headers: {\r\n        Authorization:`Bearer ${userInfo.token}`\r\n        },\r\n      }\r\n  \r\n      const { data } = await axios.get(\r\n        `/api/orders`, config\r\n      );\r\n      dispatch({\r\n        type: ORDER_LIST_SUCCESS,\r\n        payload: data,\r\n      });\r\n  \r\n    } catch (error) {\r\n      dispatch({\r\n          type: ORDER_LIST_FAIL,\r\n          payload:\r\n            error.response && error.response.data.message\r\n              ? error.response.data.message\r\n              : error.message,\r\n        })\r\n    }\r\n  };\r\n\r\n  export const deliverOrder = (order) => async (dispatch,getState) => {\r\n\r\n    try {\r\n      dispatch({\r\n        type: ORDER_DELIVER_REQUEST,\r\n      });\r\n  \r\n      const {userLogin:{userInfo}}=getState()\r\n  \r\n      const config = {\r\n        headers: {\r\n        Authorization:`Bearer ${userInfo.token}`\r\n        },\r\n      }\r\n  \r\n      const { data } = await axios.put(\r\n        `/api/orders/${order._id}/deliver`,{}, config\r\n      );\r\n      dispatch({\r\n        type: ORDER_DELIVER_SUCCESS,\r\n        payload: data,\r\n      });\r\n  \r\n    } catch (error) {\r\n      dispatch({\r\n          type: ORDER_DELIVER_FAIL,\r\n          payload:\r\n            error.response && error.response.data.message\r\n              ? error.response.data.message\r\n              : error.message,\r\n        })\r\n    }\r\n  };","C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\constants\\orderConst.js",[],"C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\screens\\OrderScreen.js",["185"],"import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { PayPalButton } from 'react-paypal-button-v2';\r\nimport {\r\n  Button,\r\n  Row,\r\n  Col,\r\n  ListGroup,\r\n  Image,\r\n  Card,\r\n  ListGroupItem,\r\n} from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Message from '../components/Message';\r\nimport Loader from '../components/Loader';\r\nimport { Link } from 'react-router-dom';\r\nimport {\r\n  getOrderDetails,\r\n  payOrder,\r\n  deliverOrder,\r\n} from '../actions/orderActions';\r\n\r\nconst OrderScreen = ({ match,history }) => {\r\n  const orderId = match.params.id;\r\n  const [sdk, setSdk] = useState(false);\r\n  const dispatch = useDispatch();\r\n\r\n  const orderDetails = useSelector((state) => state.orderDetails);\r\n  const { order, loading, error } = orderDetails;\r\n\r\n  const orderPay = useSelector((state) => state.orderPay);\r\n  const { loading: loadingPay, success: successPay } = orderPay;\r\n\r\n  const orderDeliver = useSelector((state) => state.orderDeliver);\r\n  const { loading: loadingDeliver, success: successDeliver } = orderDeliver;\r\n\r\n  const userLogin = useSelector((state) => state.userLogin);\r\n  const { userInfo } = userLogin;\r\n\r\n  if (!loading) {\r\n    const addDecimals = (num) => {\r\n      return (Math.round(num * 100) / 100).toFixed(2);\r\n    };\r\n    order.itemsPrice = addDecimals(\r\n      order.orderItems.reduce((acc, item) => acc + item.price * item.qty, 0)\r\n    );\r\n  }\r\n\r\n  useEffect(() => {\r\n    \r\n    if(!userInfo){\r\n      history.push('/login')\r\n    }\r\n    const addPayPal = async () => {\r\n      const { data: clientId } = await axios.get('/api/config/paypal');\r\n      const script = document.createElement('script');\r\n      script.type = 'text/javascript';\r\n      script.src = `https://www.paypal.com/sdk/js?client-id=${clientId}`;\r\n      script.async = true;\r\n      script.onload = () => {\r\n        setSdk(true);\r\n      };\r\n      document.body.appendChild(script);\r\n    };\r\n    if (!order || successPay || successDeliver) {\r\n      dispatch(getOrderDetails(orderId));\r\n    } else if (!order.isPaid) {\r\n      if (!window.paypal) {\r\n        addPayPal();\r\n      } else {\r\n        setSdk(true);\r\n      }\r\n    }\r\n  }, [dispatch, orderId, successPay, successDeliver, order]);\r\n\r\n  const successPaymentHandler = (paymentResult) => {\r\n    dispatch(payOrder(orderId, paymentResult));\r\n  };\r\n\r\n  const deliverHandler = () => {\r\n    dispatch(deliverOrder(order));\r\n  };\r\n\r\n  return loading ? (\r\n    <Loader />\r\n  ) : error ? (\r\n    <Message variant='danger'>{error}</Message>\r\n  ) : (\r\n    <>\r\n       <Link className='btn btn-dark my-3' to='/profile'>Go back</Link>\r\n      <h1>Order {order._id}</h1>\r\n      <Row>\r\n        <Col md={8}>\r\n          <ListGroup variant='flush'>\r\n            <ListGroupItem>\r\n              <h2>Shipping</h2>\r\n              <p>\r\n                <strong>Name: </strong>\r\n                {order.user.name}\r\n              </p>\r\n              <p>\r\n                <strong>Email: </strong>\r\n                <a href={`mailto:${order.user.email}`}>{order.user.email}</a>\r\n              </p>\r\n              <p>\r\n                <strong>Address: </strong>\r\n                {order.shippingAddress.address}, {order.shippingAddress.city}{' '}\r\n                {order.shippingAddress.postalCode},{' '}\r\n                {order.shippingAddress.country}\r\n              </p>\r\n              {order.isDelivered ? (\r\n                <Message variant='success'>\r\n                  Delivered on {order.deliveredAt}\r\n                </Message>\r\n              ) : (\r\n                <Message variant='danger'>Not delivered</Message>\r\n              )}\r\n            </ListGroupItem>\r\n            <ListGroupItem>\r\n              <h2>Payment method</h2>\r\n              <p>\r\n                <strong>Method: </strong>\r\n                {order.payment}\r\n              </p>\r\n              {order.isPaid ? (\r\n                <Message variant='success'>Paid on {order.paidAt}</Message>\r\n              ) : (\r\n                <Message variant='danger'>Not paid</Message>\r\n              )}\r\n            </ListGroupItem>\r\n\r\n            <ListGroupItem>\r\n              <h2>Order items</h2>\r\n              {order.orderItems.length === 0 ? (\r\n                <Message>Order is empty</Message>\r\n              ) : (\r\n                <ListGroup variant='flush'>\r\n                  {order.orderItems.map((item, index) => (\r\n                    <ListGroupItem key={index}>\r\n                      <Row>\r\n                        <Col md={1}>\r\n                          <Image\r\n                            src={item.image}\r\n                            alt={item.naem}\r\n                            fluid\r\n                            rounded\r\n                          ></Image>\r\n                        </Col>\r\n                        <Col>\r\n                          <Link to={`/product/${item.product}`}>\r\n                            {item.name}\r\n                          </Link>\r\n                        </Col>\r\n                        <Col md={4}>\r\n                          {item.qty} x ${item.price}=${item.qty * item.price}\r\n                        </Col>\r\n                      </Row>\r\n                    </ListGroupItem>\r\n                  ))}\r\n                </ListGroup>\r\n              )}\r\n            </ListGroupItem>\r\n          </ListGroup>\r\n        </Col>\r\n        <Col md={4}>\r\n          <Card>\r\n            <ListGroup variant='flush'>\r\n              <ListGroupItem>\r\n                <h2>Order summary</h2>\r\n              </ListGroupItem>\r\n              <ListGroupItem>\r\n                <Row>\r\n                  <Col>Items</Col>\r\n                  <Col>${order.itemsPrice}</Col>\r\n                </Row>\r\n              </ListGroupItem>\r\n              <ListGroupItem>\r\n                <Row>\r\n                  <Col>Shipping</Col>\r\n                  <Col>${order.shippingPrice}</Col>\r\n                </Row>\r\n              </ListGroupItem>\r\n              <ListGroupItem>\r\n                <Row>\r\n                  <Col>Tax</Col>\r\n                  <Col>${order.taxPrice}</Col>\r\n                </Row>\r\n              </ListGroupItem>\r\n              <ListGroupItem>\r\n                <Row>\r\n                  <Col>Total</Col>\r\n                  <Col>${order.totalPrice}</Col>\r\n                </Row>\r\n              </ListGroupItem>\r\n              {!order.isPaid && (\r\n                <ListGroupItem>\r\n                  {loadingPay && <Loader></Loader>}\r\n                  {!sdk ? (\r\n                    <Loader></Loader>\r\n                  ) : (\r\n                    <PayPalButton\r\n                      amount={order.totalPrice}\r\n                      onSuccess={successPaymentHandler}\r\n                    ></PayPalButton>\r\n                  )}\r\n                </ListGroupItem>\r\n              )}\r\n              {loadingDeliver && <Loader />}\r\n              {userInfo && userInfo.isAdmin && order.isPaid && !order.isDelivered && (\r\n                <ListGroupItem>\r\n                  <Button\r\n                    type='button'\r\n                    className='btn btn-block'\r\n                    onClick={deliverHandler}\r\n                  >\r\n                    Mark as delivered\r\n                  </Button>\r\n                </ListGroupItem>\r\n              )}\r\n            </ListGroup>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default OrderScreen;\r\n","C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\screens\\UserListScreen.js",[],"C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\screens\\UserEditScreen.js",[],"C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\screens\\ProductListScreen.js",[],"C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\screens\\ProductEditScreen.js",["186"],"C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\screens\\OrderListScreen.js",[],"C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\components\\Search.js",[],"C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\components\\Paginate.js",[],"C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\components\\ProductCarousel.js",[],"C:\\Users\\Amer\\Desktop\\Shopline\\frontend\\src\\components\\Meta.js",[],{"ruleId":"187","replacedBy":"188"},{"ruleId":"189","replacedBy":"190"},{"ruleId":"191","severity":1,"message":"192","line":9,"column":3,"nodeType":"193","messageId":"194","endLine":9,"endColumn":7},{"ruleId":"195","severity":1,"message":"196","line":53,"column":6,"nodeType":"197","endLine":53,"endColumn":31,"suggestions":"198"},{"ruleId":"191","severity":1,"message":"199","line":17,"column":10,"nodeType":"193","messageId":"194","endLine":17,"endColumn":29},{"ruleId":"191","severity":1,"message":"200","line":17,"column":30,"nodeType":"193","messageId":"194","endLine":17,"endColumn":49},{"ruleId":"191","severity":1,"message":"201","line":17,"column":50,"nodeType":"193","messageId":"194","endLine":17,"endColumn":65},{"ruleId":"195","severity":1,"message":"202","line":40,"column":7,"nodeType":"197","endLine":40,"endColumn":24,"suggestions":"203"},{"ruleId":"191","severity":1,"message":"199","line":2,"column":379,"nodeType":"193","messageId":"194","endLine":2,"endColumn":398},{"ruleId":"195","severity":1,"message":"204","line":74,"column":6,"nodeType":"197","endLine":74,"endColumn":60,"suggestions":"205"},{"ruleId":"191","severity":1,"message":"206","line":4,"column":59,"nodeType":"193","messageId":"194","endLine":4,"endColumn":68},"no-native-reassign",["207"],"no-negated-in-lhs",["208"],"no-unused-vars","'Form' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["209"],"'ORDER_DETAILS_RESET' is defined but never used.","'ORDER_DELIVER_RESET' is defined but never used.","'ORDER_PAY_RESET' is defined but never used.","React Hook useEffect has a missing dependency: 'order._id'. Either include it or remove the dependency array.",["210"],"React Hook useEffect has missing dependencies: 'history' and 'userInfo'. Either include them or remove the dependency array.",["211"],"'FormCheck' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"212","fix":"213"},{"desc":"214","fix":"215"},{"desc":"216","fix":"217"},"Update the dependencies array to be: [history, userInfo, user, dispatch]",{"range":"218","text":"219"},"Update the dependencies array to be: [history, order._id, success]",{"range":"220","text":"221"},"Update the dependencies array to be: [dispatch, orderId, successPay, successDeliver, order, userInfo, history]",{"range":"222","text":"223"},[1588,1613],"[history, userInfo, user, dispatch]",[1382,1399],"[history, order._id, success]",[2189,2243],"[dispatch, orderId, successPay, successDeliver, order, userInfo, history]"]